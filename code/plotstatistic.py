from __future__ import division
import numpy as np
import matplotlib.pyplot as plt

a_data = [[3.4295983886718751, 3.5137575683593751, 3.3684912109375, 3.4133918457031251, 3.1713857421874998, 3.2470227050781251, 3.2949992675781248, 3.189135009765625, 3.360404052734375, 3.3626188964843751, 3.3320600585937501, 3.5019541015625002, 3.1978210449218749, 3.2010769042968752, 3.5385336914062502, 3.454882080078125, 3.4735749511718752, 3.5130385742187502, 3.255111572265625, 3.6132238769531249, 3.3602309570312499, 3.4423188476562498, 3.5405415039062502, 3.2261000976562499, 3.2685913085937499, 3.4655681152343751, 3.3301096191406252, 3.232014404296875, 3.4472355957031251, 3.3869677734375001, 3.2121865234375, 3.5606791992187499, 3.2576542968750002, 3.348015869140625, 3.2403056640624999, 3.3808632812499999, 3.77149951171875, 3.4301157226562502, 3.3487749023437501, 3.5284958496093748], [3.12874267578125, 3.1378144531249998, 3.1317307128906249,3.0916447753906251, 2.9373598632812499, 2.9984077148437498, 3.1559890136718751, 2.9389067382812502, 3.0454946289062499, 3.0450339355468752, 3.110087890625, 3.161409423828125, 2.984412109375, 3.0841445312500002, 3.1850163574218748, 3.0488244628906251, 2.9780195312500002, 3.1224465332031248, 3.1141640625, 2.990635498046875, 3.0434650878906249, 3.1809050292968748, 3.2141298828124998, 3.0486323242187501, 3.1422355957031249,3.0871682128906248, 2.9588994140625, 2.9711166992187499, 3.0807219238281252, 2.9638881835937498, 3.0348317871093751, 3.1260969238281251, 3.0452609863281248, 3.0141413574218752, 3.0556501464843748, 3.1169272460937498, 3.1189628906250002, 3.13776513671875, 3.11038623046875, 2.978678955078125], [6.0462534179687504, 6.7274531250000003, 6.8281245117187499, 6.4565893554687497, 6.3681079101562501, 7.0638442382812503, 6.8915253906249996, 6.7130732421874999, 7.0103115234375002, 6.8936870117187503, 6.8536479492187503, 6.7422900390624996, 6.9169511718749996, 6.9185668945312502, 6.91446337890625, 6.8388408203125, 6.5986147460937499, 7.2541816406250001, 7.1509638671875004, 6.7917895507812496, 6.8377797851562496, 6.8177890625000002, 6.7018730468749999, 6.8238051757812501, 7.1357543945312498, 7.0827583007812498, 6.8379394531250002, 7.0058251953125001, 7.0199233398437499, 7.3720791015625, 6.96991845703125, 6.8135517578125002, 7.3017744140624998, 6.6995644531250003, 6.3646816406250002, 6.8275288085937502, 6.8763476562500001, 6.9749165039062504, 6.8693422851562502, 6.9784526367187496], [5.4855, 5.5356679687500003, 5.5058818359375001, 5.74357373046875, 5.7712841796875001, 5.5481762695312504, 5.4730361328125001, 5.2956533203124998, 5.7262172851562498, 5.6659726562500001, 5.4098457031249998, 5.65312841796875, 5.4687285156250001, 5.7709633789062504, 5.3345234374999997, 5.35387744140625, 5.7277099609375002, 5.5866689453124998, 5.4088935546875003, 5.53217431640625, 5.596775390625, 5.58084521484375, 5.4747880859375, 5.6155942382812496, 5.6924272460937502, 5.5581503906250003, 5.7007436523437498, 5.609375, 5.5385546874999996, 5.7224790039062503, 5.3721025390625003, 5.6842724609374997, 5.6006757812499997, 5.9744208984374998, 5.5506953125000003, 5.4832539062499999, 5.4057470703124997, 5.5132026367187503, 5.7442373046875002, 5.486873046875], [3.5233041992187499, 3.3359489746093751, 3.2895532226562501, 3.1626972656249999, 3.3691701660156248, 3.246654052734375, 3.2864155273437499, 3.1468691406249998, 3.28340380859375, 3.0963320312499998, 3.31488916015625, 3.3782573242187501, 3.2703608398437498, 3.3031452636718752, 3.2399023437499999, 3.1283884277343752, 3.2696950683593751, 3.3826833496093749, 3.2272478027343752, 3.2167956542968752, 3.27246728515625, 3.429310302734375, 3.4471459960937501, 3.24690673828125, 3.3052526855468751, 3.2743916015624999, 3.1247053222656249, 3.1873073730468748, 3.1814606933593752, 3.20750634765625, 3.1858049316406252, 3.491180419921875, 3.26850439453125, 3.4585625000000002, 3.1544707031249999, 3.2723339843749999, 3.3471416015625, 3.3523513183593749, 3.2314184570312499, 3.286254638671875], [3.6638259277343752, 3.8319042968749999, 3.765566162109375, 3.6108095703125, 3.7537172851562501, 3.62643408203125, 3.5064660644531251, 3.66663037109375, 3.7173835449218751, 3.6514638671875002, 3.779260009765625, 3.8581005859375002, 3.640393798828125, 3.6456948242187499, 3.8157358398437502, 3.7063176269531248, 3.6742058105468751, 3.99206103515625, 3.7746791992187498, 3.5925612792968749, 3.6214877929687499, 3.8674152832031252, 3.7793488769531249, 3.7684221191406251, 3.5653615722656249, 3.7964113769531251, 3.6175505371093748, 3.7814770507812501, 3.700947509765625, 3.8360754394531251, 3.7474619140624998, 3.8225996093750001, 3.8555410156250001, 3.5128818359374998, 3.7376037597656251, 3.7389621582031252, 3.9202854003906249, 3.9176413574218749, 3.6777961425781251, 3.6779606933593749], [3.207746337890625, 3.2596235351562499, 3.2455019531249998, 3.0711311035156248, 3.1341501464843748, 3.1543505859374998, 3.1636875, 3.1325261230468748, 3.0776696777343751, 3.0813286132812499, 3.299830810546875, 3.2538457031250001, 3.13540869140625, 3.1844445800781251, 3.2782451171874998, 3.124021484375, 3.061784912109375, 3.22919140625, 3.0994841308593748, 3.1715410156249999, 3.2599602050781251, 3.123607177734375, 3.2150222167968749, 3.170959228515625, 3.1511137695312499, 3.0902915039062502, 3.056440185546875, 3.0699511718750001, 3.137387939453125, 3.1381083984374998, 3.1301831054687499, 3.2195139160156252, 3.2163120117187498, 3.1835471191406248, 3.0660546874999999, 3.24022119140625, 3.3186953125, 3.1540537109375002, 3.2863981933593749, 3.1260173339843749], [3.4441669921875002, 3.5919899902343748, 3.398116943359375, 3.2619775390624999, 3.3315288085937498, 3.2573664550781252, 3.25912255859375, 3.4010576171875, 3.3321823730468751, 3.2188254394531248, 3.5285661621093749, 3.45065087890625, 3.294197998046875, 3.3105585937500002, 3.3840866699218748, 3.2361948242187499, 3.4054865722656249, 3.6259482421875, 3.3448278808593752, 3.4660007324218749, 3.1732827148437499, 3.4195190429687501, 3.5237666015625, 3.3863759765624999, 3.456983154296875, 3.3130520019531251, 3.25272021484375, 3.2452548828125001, 3.3467099609375, 3.510497802734375, 3.3705537109375001, 3.399845703125, 3.3530834960937499, 3.2830363769531248, 3.3033347167968752, 3.3810625000000001, 3.4764482421874998, 3.4055517578124999, 3.5010627441406248, 3.26997607421875]]

reorder = [0,5,1,7,2,4,3,6]

data = []
for k in reorder:
    data.append(a_data[k])
    print len(a_data[k])

def lsmd(sample):
    return {'len':len(sample), 'std':np.std(sample), 'mean':np.mean(sample)}

# TODO change these two functions to take a pair of LSM dicts instead
def df(a,b):
    """ calculate the degrees of freedom in a two-sample t test. a and b are the lsm dicts from lists of samples """
    n = (a['std']**2/a['len'] + b['std']**2/b['len'])**2
    d1 = (a['std']**2/a['len'])**2 / (a['len']-1)
    d2 = (b['std']**2/b['len'])**2 / (b['len']-2)
    return n/(d1+d2)

def tstat(a,b):
    """ Calculate the two-sample t test. a and b are the lsm dicts from lists of samples"""
    return (a['mean']-b['mean'])/(a['std']**2/a['len'] + b['std']**2/b['len'])**0.5
    
def difflsm(lsm1, lsm2):
    """ Calculate the length, standard deviation, and mean of the distribution of differences between two samples
    Given the lenth, standard deviations, and means of each of those two samples. """
    diff = {}
    diff['mean'] = a['mean'] - b['mean']
    diff['std'] = ( a['std']/a['len'] + b['std']/b['len'] )**0.5
    assert a['len'] == b['len']
    diff['len'] = a['len']
    return diff

for i,j in [(0,1),(2,3),(4,5),(6,7)]:
    print "\nDifference between experiment %i and %i" % (i,j)
    a = lsmd(data[i])
    b = lsmd(data[j])
    print "mean1 - mean2 = %0.5f" % (a['mean']-b['mean'])
    print "df = " + str(df(a,b))
    print "t = " + str(tstat(a,b))
    
print '\n ----------------'

for i,j,k,l in [(0,1,2,3),(4,5,6,7)]:
    diff1 = difflsm( lsmd(data[i]), lsmd(data[j]) )
    diff2 = difflsm( lsmd(data[k]), lsmd(data[l]) )
    print "\n(e%i - e%i) - (e%i - e%i)" % (i,j,k,l)
    a = lsmd(data[i])
    b = lsmd(data[j])
    print "mean1 - mean2 = %0.5f" % (a['mean']-b['mean'])
    print "df = " + str(df(a,b))
    print "t = " + str(tstat(a,b))

# generate a boxplot figure to compare the values
plt.boxplot(data, notch=False, sym='+', vert=False, whis=1.5)
plt.grid(True)
plt.axis([2.5, 7.5, 8.5, 0.5])
plt.ylabel('Experiment')
plt.xlabel('Reconstruction Error')
plt.title("Test set reconstruction error for each experiment; 20 random seeds")

plt.text(4.1, 0.9, 'Interleaved model on images only')
plt.text(4.1, 1.9, 'Interleaved model on audio, then images')

plt.text(4.1, 2.9, 'Layer-wise model on images only')
plt.text(4.1, 3.9, 'Layer-wise model on audio, then images')

plt.text(3.0, 4.9, 'Interleaved model on audio only')
plt.text(4.1, 5.9, 'Interleaved model on images, then audio')

plt.text(3.0, 6.9, 'Layer-wise model on audio only')
plt.text(4.1, 7.9, 'Layer-wise model on images, then audio')





plt.show()



